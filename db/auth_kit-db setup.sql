/* -----------------------------------------------------
    auth_kit-db setup.sql

    Setup Script for the AuthKit database.
    Partially generated by MySQL Workbench.

    Author:  Luis Hutterli
    Date:    19.04.2025

    History:
    Version     Date        Who      Description
    1.0         19.04.2025  Luis     created
    1.1         26.04.2025  Luis     removed wrong identifying relations, removed enum enforcing on oauth provider, renived engine (pg compliance)
    
    Copyright Â© 2025 Luis Hutterli, Switzerland. All rights reserved.
    This program/script is intended for the auth kit service built for swisscounts.ch
----------------------------------------------------- */

-- -----------------------------------------------------
-- Schema AuthKit
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS AuthKit DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ;
USE AuthKit ;

-- -----------------------------------------------------
-- Table TOrganizations
-- -----------------------------------------------------
DROP TABLE IF EXISTS TOrganizations ;

CREATE TABLE TOrganizations (
  orgId INT NOT NULL AUTO_INCREMENT,
  orgName VARCHAR(255) NOT NULL,
  orgCreated TIMESTAMP NOT NULL DEFAULT now(),
  orgStatus ENUM('active', 'suspended', 'deleted') NULL,
  PRIMARY KEY (orgId));


-- -----------------------------------------------------
-- Table TAccounts
-- -----------------------------------------------------
DROP TABLE IF EXISTS TAccounts ;

CREATE TABLE TAccounts (
  accId INT NOT NULL AUTO_INCREMENT,
  accEmail VARCHAR(255) NOT NULL,
  accName VARCHAR(45) NOT NULL,
  accSurname VARCHAR(45) NOT NULL,
  accPasswordHash CHAR(160) NULL,
  accEmailVerified TINYINT NOT NULL DEFAULT 0,
  accJWTversion INT NOT NULL DEFAULT 0,
  accCreated TIMESTAMP NOT NULL DEFAULT now(),
  accStatus ENUM('active', 'suspended', 'deleted') NOT NULL,
  PRIMARY KEY (accId),
  UNIQUE INDEX accEmail_UNIQUE (accEmail ASC) VISIBLE);


-- -----------------------------------------------------
-- Table TOrgMemberships
-- -----------------------------------------------------
DROP TABLE IF EXISTS TOrgMemberships ;

CREATE TABLE TOrgMemberships (
  orgId INT NOT NULL,
  accId INT NOT NULL,
  orgMembCreated TIMESTAMP NOT NULL DEFAULT now(),
  orgMembStatus ENUM('active', 'suspended', 'deleted') NOT NULL,
  PRIMARY KEY (orgId, accId));


-- -----------------------------------------------------
-- Table TGroups
-- -----------------------------------------------------
DROP TABLE IF EXISTS TGroups ;

CREATE TABLE TGroups (
  groupId INT NOT NULL AUTO_INCREMENT,
  groupName VARCHAR(255) NOT NULL,
  groupDescription TEXT NULL,
  orgId INT NULL COMMENT 'null for global groups',
  PRIMARY KEY (groupId));


-- -----------------------------------------------------
-- Table TPermissions
-- -----------------------------------------------------
DROP TABLE IF EXISTS TPermissions ;

CREATE TABLE TPermissions (
  permId VARCHAR(255) NOT NULL COMMENT 'Format = level:resource:action (eg. org:invoice:delete)',
  permName VARCHAR(255) NOT NULL,
  permDescription TEXT NULL,
  PRIMARY KEY (permId));


-- -----------------------------------------------------
-- Table TGroupGrants
-- -----------------------------------------------------
DROP TABLE IF EXISTS TGroupGrants ;

CREATE TABLE TGroupGrants (
  groupId INT NOT NULL,
  permId VARCHAR(255) NOT NULL,
  groupGrantCreated TIMESTAMP NOT NULL DEFAULT now(),
  groupGrantStatus ENUM('active', 'suspended', 'deleted') NOT NULL,
  PRIMARY KEY (permId, groupId));


-- -----------------------------------------------------
-- Table TGroupMemberships
-- -----------------------------------------------------
DROP TABLE IF EXISTS TGroupMemberships ;

CREATE TABLE TGroupMemberships (
  groupId INT NOT NULL,
  accId INT NOT NULL,
  orgId INT NULL COMMENT 'null if group scope is global',
  groupMembCreated TIMESTAMP NOT NULL DEFAULT now(),
  groupMembStatus ENUM('active', 'suspended', 'deleted') NOT NULL,
  PRIMARY KEY (groupId, accId));


-- -----------------------------------------------------
-- Table TAccountGrants
-- -----------------------------------------------------
DROP TABLE IF EXISTS TAccountGrants ;

CREATE TABLE TAccountGrants (
  permId VARCHAR(255) NOT NULL,
  accId INT NOT NULL,
  orgId INT NOT NULL,
  accGrantCreated TIMESTAMP NOT NULL DEFAULT now(),
  accGrantGivenBy INT NOT NULL,
  accGrantStatus ENUM('active', 'suspended', 'deleted') NOT NULL,
  PRIMARY KEY (permId, accId, orgId));


-- -----------------------------------------------------
-- Table TLoginAttempts
-- -----------------------------------------------------
DROP TABLE IF EXISTS TLoginAttempts ;

CREATE TABLE TLoginAttempts (
  loginAttemptId INT NOT NULL AUTO_INCREMENT,
  loginAttemptSourceIP VARCHAR(39) NOT NULL COMMENT '39 chars max. because ipv6 has a max length of 32 + 7 chars for : seperating the blocks',
  loginAttemptUserAgent VARCHAR(255) NOT NULL,
  loginAttemptTime TIMESTAMP NOT NULL DEFAULT now(),
  loginAttemptSuccess TINYINT NOT NULL,
  accId INT NOT NULL,
  PRIMARY KEY (loginAttemptId));


-- -----------------------------------------------------
-- Table TOAuthAccountLinks
-- -----------------------------------------------------
DROP TABLE IF EXISTS TOAuthAccountLinks ;

CREATE TABLE TOAuthAccountLinks (
  oauthProviderUID VARCHAR(255) NOT NULL COMMENT 'User ID in providers DB',
  oauthProvider VARCHAR(255) NOT NULL COMMENT 'Sample Data',
  oauthLinkUsername VARCHAR(255) NOT NULL,
  oauthLinkCreated TIMESTAMP NOT NULL DEFAULT now(),
  oauthLinkStatus ENUM('active', 'suspended', 'deleted') NOT NULL,
  accId INT NOT NULL COMMENT 'The username on the providors side',
  PRIMARY KEY (oauthProviderUID, oauthProvider));


-- -----------------------------------------------------
-- Table TTwoFactorTOTP
-- -----------------------------------------------------
DROP TABLE IF EXISTS TTwoFactorTOTP ;

CREATE TABLE TTwoFactorTOTP (
  accId INT NOT NULL,
  totpSecret VARCHAR(512) NOT NULL COMMENT 'encrypted totp secret, size not known yet',
  totpConfirmed TINYINT NOT NULL DEFAULT 0 COMMENT 'code created + shown & confirmed by user',
  totpEnabled TINYINT NOT NULL DEFAULT 1 COMMENT 'eg. admin override',
  totpCreated TIMESTAMP NOT NULL DEFAULT now(),
  totpLastUsed TIMESTAMP NULL DEFAULT now(),
  PRIMARY KEY (accId));


-- -----------------------------------------------------
-- Table TEmailVerifications
-- -----------------------------------------------------
DROP TABLE IF EXISTS TEmailVerifications ;

CREATE TABLE TEmailVerifications (
  emailVerificationId CHAR(32) NOT NULL,
  emailVerificationCreated TIMESTAMP NOT NULL DEFAULT now() COMMENT 'This is the hashed token',
  emailVerificationExpires TIMESTAMP NOT NULL,
  accId INT NOT NULL,
  PRIMARY KEY (emailVerificationId));


-- -----------------------------------------------------
-- Table TPasswordResets
-- -----------------------------------------------------
DROP TABLE IF EXISTS TPasswordResets ;

CREATE TABLE TPasswordResets (
  pwResetId CHAR(32) NOT NULL,
  pwResetCreated TIMESTAMP NOT NULL DEFAULT now(),
  pwResetExpires TIMESTAMP NOT NULL,
  pwResetUsed TIMESTAMP NULL,
  accId INT NOT NULL,
  PRIMARY KEY (pwResetId));